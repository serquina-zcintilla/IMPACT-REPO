package default1;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public class StudentPage {
    private static final String URL = "jdbc:sqlserver://localhost:1433;databaseName=LMS_TEST;encrypt=true;trustServerCertificate=true";
    private static final String USER = "capilitan";
    private static final String PASSWORD = "capilitan";
    
    private static JScrollPane scrollPane;
    private static JTable table;
    private static String currentStudentId; // Make it non-final

    public static void launchStudentPage(String studentId) {
        currentStudentId = studentId;
        System.out.println("Logged in Student ID: " + currentStudentId);
        createAndShowGUI();
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("🧼 Student Dashboard - Cleaning Tools");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        ImageIcon icon = new ImageIcon("C:\\Users\\zcint\\Downloads\\download (5).png");
        frame.setIconImage(icon.getImage());

        JPanel header = new JPanel();
        header.setBackground(new Color(0, 102, 153));
        JLabel title = new JLabel("Student Dashboard");
        title.setFont(new Font("Segoe UI", Font.BOLD, 26));
        title.setForeground(Color.WHITE);
        header.add(title);
        frame.add(header, BorderLayout.NORTH);

        scrollPane = new JScrollPane();
        frame.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));
        JButton viewButton = new JButton("📋 View Tools");
        JButton borrowButton = new JButton("👜 Borrow Tool");
        JButton returnButton = new JButton("🔁 Return Tool");
        JButton historyButton = new JButton("🕘 View History");
        JButton exitButton = new JButton("🚪 Exit");

        JButton[] buttons = { viewButton, borrowButton, returnButton, historyButton, exitButton };
        for (JButton btn : buttons) {
            btn.setFont(new Font("Segoe UI", Font.PLAIN, 16));
            btn.setBackground(new Color(204, 229, 255));
            btn.setFocusPainted(false);
            buttonPanel.add(btn);
        }

        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Button Listeners
        viewButton.addActionListener(e -> displayInventory());
        borrowButton.addActionListener(e -> borrowTool());
        returnButton.addActionListener(e -> returnTool());
        historyButton.addActionListener(e -> displayHistory());
        exitButton.addActionListener(e -> frame.dispose());

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private static void displayInventory() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            String query = "SELECT ItemID AS 'ID', Name AS 'Name', Quantity AS 'Qty', Unit AS 'Unit' FROM dbo.inventory WHERE Quantity > 0";
            try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
                ResultSetMetaData meta = rs.getMetaData();
                int columnCount = meta.getColumnCount();

                String[] columnNames = new String[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    columnNames[i - 1] = meta.getColumnLabel(i);
                }

                DefaultTableModel model = new DefaultTableModel(columnNames, 0);
                while (rs.next()) {
                    Object[] row = new Object[columnCount];
                    for (int i = 1; i <= columnCount; i++) {
                        row[i - 1] = rs.getObject(i);
                    }
                    model.addRow(row);
                }

                table = new JTable(model);
                formatTable(table);
                scrollPane.setViewportView(table);
            }
        } catch (SQLException e) {
            showError("Error: " + e.getMessage());
        }
    }

    private static void borrowTool() {
        String itemIdStr = JOptionPane.showInputDialog("Enter Item ID to borrow:");
        if (itemIdStr == null || itemIdStr.trim().isEmpty()) return;

        String qtyStr = JOptionPane.showInputDialog("Enter quantity to borrow:");
        if (qtyStr == null || qtyStr.trim().isEmpty()) return;

        try {
            int itemId = Integer.parseInt(itemIdStr.trim());
            int quantity = Integer.parseInt(qtyStr.trim());

            if (quantity <= 0) {
                showError("Quantity must be greater than 0.");
                return;
            }

            try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
                conn.setAutoCommit(false);

                try (PreparedStatement checkStmt = conn.prepareStatement("SELECT Quantity FROM inventory WHERE ItemID = ?")) {
                    checkStmt.setInt(1, itemId);
                    ResultSet rs = checkStmt.executeQuery();
                    if (!rs.next()) {
                        showError("Invalid Item ID.");
                        return;
                    }
                    int stock = rs.getInt("Quantity");
                    if (stock < quantity) {
                        showError("Not enough stock. Available: " + stock);
                        return;
                    }
                }

                try (PreparedStatement updateStmt = conn.prepareStatement("UPDATE inventory SET Quantity = Quantity - ? WHERE ItemID = ?")) {
                    updateStmt.setInt(1, quantity);
                    updateStmt.setInt(2, itemId);
                    updateStmt.executeUpdate();
                }

                String mergeBorrow = "MERGE borrowed_tools AS target " +
                        "USING (SELECT ? AS StudentID, ? AS ItemID) AS source " +
                        "ON target.StudentID = source.StudentID AND target.ItemID = source.ItemID " +
                        "WHEN MATCHED THEN UPDATE SET Quantity = target.Quantity + ? " +
                        "WHEN NOT MATCHED THEN INSERT (StudentID, ItemID, Quantity) VALUES (?, ?, ?);";
                try (PreparedStatement stmt = conn.prepareStatement(mergeBorrow)) {
                    stmt.setString(1, currentStudentId);
                    stmt.setInt(2, itemId);
                    stmt.setInt(3, quantity);
                    stmt.setString(4, currentStudentId);
                    stmt.setInt(5, itemId);
                    stmt.setInt(6, quantity);
                    stmt.executeUpdate();
                }

                try (PreparedStatement logStmt = conn.prepareStatement("INSERT INTO borrow_history (StudentID, ItemID, Quantity) VALUES (?, ?, ?)")) {
                    logStmt.setString(1, currentStudentId);
                    logStmt.setInt(2, itemId);
                    logStmt.setInt(3, quantity);
                    logStmt.executeUpdate();
                }

                conn.commit();
                JOptionPane.showMessageDialog(null, "Tool borrowed successfully!");
                displayInventory();
            }

        } catch (NumberFormatException e) {
            showError("Please enter valid numbers.");
        } catch (SQLException e) {
            showError("Database Error: " + e.getMessage());
        }
    }

    private static void returnTool() {
        String itemIdStr = JOptionPane.showInputDialog("Enter Item ID to return:");
        if (itemIdStr == null || itemIdStr.trim().isEmpty()) return;

        String qtyStr = JOptionPane.showInputDialog("Enter quantity to return:");
        if (qtyStr == null || qtyStr.trim().isEmpty()) return;

        try {
            int itemId = Integer.parseInt(itemIdStr.trim());
            int quantity = Integer.parseInt(qtyStr.trim());

            if (quantity <= 0) {
                showError("Quantity must be greater than 0.");
                return;
            }

            try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
                conn.setAutoCommit(false);

                try (PreparedStatement checkStmt = conn.prepareStatement("SELECT Quantity FROM borrowed_tools WHERE StudentID = ? AND ItemID = ?")) {
                    checkStmt.setString(1, currentStudentId);
                    checkStmt.setInt(2, itemId);
                    ResultSet rs = checkStmt.executeQuery();
                    if (!rs.next()) {
                        showError("No record found of you borrowing this item.");
                        return;
                    }
                    int borrowedQty = rs.getInt("Quantity");
                    if (borrowedQty < quantity) {
                        showError("You are returning more than you borrowed. You only borrowed: " + borrowedQty);
                        return;
                    }
                }

                try (PreparedStatement updateStmt = conn.prepareStatement("UPDATE inventory SET Quantity = Quantity + ? WHERE ItemID = ?")) {
                    updateStmt.setInt(1, quantity);
                    updateStmt.setInt(2, itemId);
                    updateStmt.executeUpdate();
                }

                try (PreparedStatement returnStmt = conn.prepareStatement("UPDATE borrowed_tools SET Quantity = Quantity - ? WHERE StudentID = ? AND ItemID = ?")) {
                    returnStmt.setInt(1, quantity);
                    returnStmt.setString(2, currentStudentId);
                    returnStmt.setInt(3, itemId);
                    returnStmt.executeUpdate();
                }

                try (Statement cleanupStmt = conn.createStatement()) {
                    cleanupStmt.executeUpdate("DELETE FROM borrowed_tools WHERE Quantity = 0");
                }

                try (PreparedStatement logStmt = conn.prepareStatement("INSERT INTO return_history (StudentID, ItemID, Quantity) VALUES (?, ?, ?)")) {
                    logStmt.setString(1, currentStudentId);
                    logStmt.setInt(2, itemId);
                    logStmt.setInt(3, quantity);
                    logStmt.executeUpdate();
                }

                conn.commit();
                JOptionPane.showMessageDialog(null, "Tool returned successfully!");
                displayInventory();
            }

        } catch (NumberFormatException e) {
            showError("Please enter valid numbers.");
        } catch (SQLException e) {
            showError("Database Error: " + e.getMessage());
        }
    }

    private static void displayHistory() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
        	String query = "SELECT 'Borrow' AS Action, StudentID, ItemID, Quantity, DateBorrowed AS ActionDateTime FROM borrow_history " +
                    "UNION ALL " +
                    "SELECT 'Return' AS Action, StudentID, ItemID, Quantity, DateReturned AS ActionDateTime FROM return_history " +
                    "ORDER BY ActionDateTime DESC";

     try (PreparedStatement stmt = conn.prepareStatement(query)) {
                ResultSet rs = stmt.executeQuery();

                String[] columnNames = {"Action", "StudentID", "ItemID", "Quantity", "Date & Time"};
                DefaultTableModel model = new DefaultTableModel(columnNames, 0);

                SimpleDateFormat sdf = new SimpleDateFormat("M-d-yyyy h:mm a"); // New format

                while (rs.next()) {
                    String action = rs.getString("Action");
                    String studentId = rs.getString("StudentID");
                    int itemId = rs.getInt("ItemID");
                    int qty = rs.getInt("Quantity");
                    Timestamp ts = rs.getTimestamp("ActionDateTime");

                    String dateTimeStr;
                    if (ts != null) {
                        dateTimeStr = sdf.format(ts);
                    } else {
                        // If null, use current date/time or a fixed fallback
                        dateTimeStr = sdf.format(new java.util.Date());
                    }

                    model.addRow(new Object[]{action, studentId, itemId, qty, dateTimeStr});
                }

                table = new JTable(model);
                formatTable(table);
                scrollPane.setViewportView(table);
            }
        } catch (SQLException e) {
            showError("Error fetching history: " + e.getMessage());
        }
    }

    private static void formatTable(JTable table) {
        JTableHeader header = table.getTableHeader();
        header.setBackground(new Color(0, 102, 153));
        header.setForeground(Color.WHITE);
        header.setFont(new Font("Segoe UI", Font.BOLD, 14));
        table.setRowHeight(25);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 13));
    }

    private static void showError(String message) {
        JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
}
